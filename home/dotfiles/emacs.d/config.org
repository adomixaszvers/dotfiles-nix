#+PROPERTY: header-args :tangle config.el
* Display
** Ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
  (add-hook 'ediff-prepare-buffer-hook
    (lambda () (when (eq major-mode 'org-mode) (outline-show-all))))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
** Relative Numbers
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'relative
		display-line-numbers-current-absolute t
		display-line-numbers-width 4
		display-line-numbers-widen t)
  (setq display-line-numbers 'relative)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-default-font "FuraMono Nerd Font Mono-9")
#+END_SRC
** Disable menu and toolbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Enabled themes
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes (quote (doom-dracula)))
   '(custom-safe-themes
     (quote
      ("1c082c9b84449e54af757bcae23617d11f563fc9f33a832a8a2813c4d7dfb652" "2c88b703cbe7ce802bf6f0bffe3edbb8d9ec68fc7557089d4eaa1e29f7529fe1" "6b289bab28a7e511f9c54496be647dc60f5bd8f9917c9495978762b99d8c96a0" "93a0885d5f46d2aeac12bf6be1754faa7d5e28b27926b8aa812840fe7d0b7983" "ecba61c2239fbef776a72b65295b88e5534e458dfe3e6d7d9f9cb353448a569e" "151bde695af0b0e69c3846500f58d9a0ca8cb2d447da68d7fbf4154dcf818ebc" "d1b4990bd599f5e2186c3f75769a2c5334063e9e541e37514942c27975700370" "cd736a63aa586be066d5a1f0e51179239fe70e16a9f18991f6f5d99732cabb32" "9d9fda57c476672acd8c6efeb9dc801abea906634575ad2c7688d055878e69d6" "b4c13d25b1f9f66eb769e05889ee000f89d64b089f96851b6da643cee4fdab08" "4697a2d4afca3f5ed4fdf5f715e36a6cac5c6154e105f3596b44a4874ae52c45" "b35a14c7d94c1f411890d45edfb9dc1bd61c5becd5c326790b51df6ebf60f402" "fe666e5ac37c2dfcf80074e88b9252c71a22b6f5d2f566df9a7aa4f9bea55ef8" "a566448baba25f48e1833d86807b77876a899fc0c3d33394094cf267c970749f" "a3fa4abaf08cc169b61dea8f6df1bbe4123ec1d2afeb01c17e11fdc31fc66379" "3a3de615f80a0e8706208f0a71bbcc7cc3816988f971b6d237223b6731f91605" "f0dc4ddca147f3c7b1c7397141b888562a48d9888f1595d69572db73be99a024" default))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
* Quality of life changes
** y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Backups
** Don't clobber symlinks
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
#+END_SRC
** Don't litter filesytem tree
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
   '(("." . "~/.emacs-saves/")))
#+END_SRC
** Use versioned backups
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+END_SRC
* Packages
** We will use use-package macro
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (counsel-mode 1))
#+END_SRC
** Counsel Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  (use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode 1))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  (projects . 5)
			  (agenda . 5)
			  (registers . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-search-module 'evil-search)
    (setq evil-want-integration nil) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'dashboard-mode 'emacs))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init
    (setq ivy-display-style 'fancy)
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
    :config
    (ivy-mode 1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-magit-file-mode))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (('org-mode . (lambda () (org-bullets-mode 1)))))
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :init
    (setq powerline-default-separator 'wave)
    :config
    (spaceline-spacemacs-theme))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind
    (("C-s" . swiper)))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC
