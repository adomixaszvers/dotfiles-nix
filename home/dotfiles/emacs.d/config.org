#+PROPERTY: header-args :tangle config.el
* Display
** Ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
  (add-hook 'ediff-prepare-buffer-hook
    (lambda () (when (eq major-mode 'org-mode) (outline-show-all))))
#+END_SRC
** Relative Numbers
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type 'relative
                display-line-numbers-current-absolute t
                display-line-numbers-width 4
                display-line-numbers-widen t)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'display-line-numbers-mode-hook
            (lambda () (setq-local display-line-numbers (if (eq major-mode 'org-mode) 'visual 'relative))))
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "FuraMono Nerd Font Mono-9")
#+END_SRC
** Disable menu and toolbar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Scroll compilation output
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'compilation-scroll-output t)
#+END_SRC
** Trailing whitespace
#+BEGIN_SRC emacs-lisp
  (let ((stw (lambda () (setq-local show-trailing-whitespace t))))
      (add-hook 'text-mode-hook stw)
      (add-hook 'prog-mode-hook stw))
#+END_SRC
** Disable startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
* Quality of life changes
** Disable indent tabs mode
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Disable checkdoc in org source blocks
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-src-mode-hook (lambda ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))
#+END_SRC
* Backups
** Don't clobber symlinks
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'backup-by-copying t)
#+END_SRC
** Don't litter filesytem tree
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'backup-directory-alist
   '(("." . "~/.emacs-saves/")))
#+END_SRC
** Use versioned backups
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'delete-old-versions t)
  (customize-set-variable 'kept-new-versions 6)
  (customize-set-variable 'kept-old-versions 2)
  (customize-set-variable 'version-control t)
#+END_SRC
* Safe to load variables
#+BEGIN_SRC emacs-lisp
  (setq safe-local-variable-values
        '((projectile-project-compilation-cmd . "home-manager switch")
          (flycheck-disabled-checkers . '(emacs-lisp-checkdoc))))
#+END_SRC
* Packages
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (beacon-mode 1))
#+END_SRC
** Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :bind ([remap org-goto] . counsel-org-goto)
    :config
    (counsel-mode 1))
#+END_SRC
** Counsel Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :custom
    (projectile-completion-system 'ivy)
    :bind-keymap
    ("C-c p" . projectile-command-map))
  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode 1))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Direnv
#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC
** Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (load-theme 'doom-dracula t))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :custom
    (evil-search-module 'evil-search)
    (evil-want-integration t)
    (evil-want-C-u-scroll t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'dashboard-mode 'emacs))
#+END_SRC
*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
*** Evil Commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :diminish evil-commentary-mode
    :after evil
    :config
    (evil-commentary-mode))
#+END_SRC
*** Evil Magit
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :after magit)
#+END_SRC
*** Evil Org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :custom
    (evil-org-key-theme '(textobjects insert navigation additional))
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
*** Evil Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :hook
    (prog-mode . evil-surround-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook
    (prog-mode . flycheck-mode))
#+END_SRC
** Intero
#+BEGIN_SRC emacs-lisp
  (use-package intero
    :config
    (flycheck-add-next-checker 'intero
                             '(warning . haskell-hlint))
    :hook (haskell-mode . intero-mode))
#+END_SRC
** Haskell mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'")
#+END_SRC
** Hindent
#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :hook
    (haskell-mode . hindent-mode))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :init
    (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
    :custom
    (ivy-display-style 'fancy)
    :config
    (ivy-mode 1))
#+END_SRC
** Lispy
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :hook
    (emacs-lisp-mode . lispy-mode))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("C-x g" . magit-status))
#+END_SRC
** Nix mode
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :diminish nix-prettify-mode
    :init
    (nix-prettify-global-mode 1)
    :mode "\\.nix\\'")
#+END_SRC
** Nov Mode
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
** Pretty mode
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :config
    (global-pretty-mode t))
#+END_SRC
** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Rust mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'")
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :custom
    (powerline-default-separator 'wave)
    :config
    (spaceline-spacemacs-theme))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind
    ("C-s" . swiper))
#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode)
#+END_SRC
** Volatile highlights
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :diminish volatile-highlights-mode
    :config
    (volatile-highlights-mode t)
    ;;-----------------------------------------------------------------------------
    ;; Supporting evil-mode.
    ;;-----------------------------------------------------------------------------
    (vhl/define-extension 'evil 'evil-paste-after 'evil-paste-before
                          'evil-paste-pop 'evil-move)
    (vhl/install-extension 'evil))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC
** Zoom for better window sizes
#+BEGIN_SRC emacs-lisp
  (use-package zoom
    :bind
    ("C-x +" . zoom))
#+END_SRC
