# This file was @generated by crate2nix 0.8.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>, pkgs ? import nixpkgs { config = { }; }, lib ? pkgs.lib
, stdenv ? pkgs.stdenv, buildRustCrate ? pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [
  "default"
]
# If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true }:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "my_penrose_config";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures { inherit packageId; };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  root_crate = internal.deprecationWarning
    "root_crate is deprecated since crate2nix 0.4. Please use rootCrate instead."
    rootCrate.build;
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "my_penrose_config" = rec {
      packageId = "my_penrose_config";
      build = internal.buildRustCrateWithFeatures {
        packageId = "my_penrose_config";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };
  workspace_members = internal.deprecationWarning
    "workspace_members is deprecated in crate2nix 0.4. Please use workspaceMembers instead."
    lib.mapAttrs (n: v: v.build) workspaceMembers;

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.38";
        edition = "2018";
        sha256 = "1c8ls4w26bjwvjvb6a3s4bpk28raljy3a2pmwrvby3d843szgpdg";
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];
        features = { "default" = [ "std" ]; };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0jj6i9zn4gjl03kjvziqdji6rwx8ykz8zk2ngpc331z2g3fk3c6d";
        authors = [ "Josh Stone <cuviper@gmail.com>" ];

      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [ "The Rust Project Developers" ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cairo-rs" = rec {
        crateName = "cairo-rs";
        version = "0.9.1";
        edition = "2015";
        sha256 = "1f5x6ipfpzz0ffph0pg0xfkdfcbr0jp59714zz857jp88zhg5h65";
        libName = "cairo";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "glib";
            packageId = "glib";
            optional = true;
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
            optional = true;
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "default" = [ "use_glib" "freetype" ];
          "dox" = [ "cairo-sys-rs/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "freetype" = [ "cairo-sys-rs/freetype" ];
          "pdf" = [ "cairo-sys-rs/pdf" ];
          "png" = [ "cairo-sys-rs/png" ];
          "ps" = [ "cairo-sys-rs/ps" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "script" = [ "cairo-sys-rs/script" ];
          "svg" = [ "cairo-sys-rs/svg" ];
          "use_glib" =
            [ "glib" "glib-sys" "gobject-sys" "cairo-sys-rs/use_glib" ];
          "v1_14" = [ "cairo-sys-rs/v1_14" ];
          "v1_16" = [ "v1_14" "cairo-sys-rs/v1_16" ];
          "win32-surface" = [ "cairo-sys-rs/win32-surface" ];
          "xcb" = [ "cairo-sys-rs/xcb" ];
          "xlib" = [ "cairo-sys-rs/xlib" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "freetype"
          "glib"
          "glib-sys"
          "gobject-sys"
          "use_glib"
          "xcb"
        ];
      };
      "cairo-sys-rs" = rec {
        crateName = "cairo-sys-rs";
        version = "0.10.0";
        edition = "2015";
        sha256 = "19wch8zc11hbi724mn16hhqyff8kw5c5bsbdlzpxdwfmkadn7lif";
        libName = "cairo_sys";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [{
          name = "system-deps";
          packageId = "system-deps";
        }];
        features = {
          "dox" = [ "x11/dox" ];
          "use_glib" = [ "glib-sys" ];
          "v1_16" = [ "v1_14" ];
          "win32-surface" = [ "winapi" ];
          "xlib" = [ "x11" ];
        };
        resolvedDefaultFeatures = [ "freetype" "glib-sys" "use_glib" "xcb" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.0.66";
        edition = "2018";
        crateBin = [ ];
        sha256 = "0j7d7h4n81z5f22l3v8ggjvvw8m64636nlaqax4x1y44da1rc12c";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        features = { "parallel" = [ "jobserver" ]; };
      };
      "cfg-if 0.1.10" = rec {
        crateName = "cfg-if";
        version = "0.1.10";
        edition = "2018";
        sha256 = "08h80ihs74jcyp24cd75wwabygbbdgl05k6p5dmq8akbr78vv1a7";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        features = { "rustc-dep-of-std" = [ "core" "compiler_builtins" ]; };
      };
      "cfg-if 1.0.0" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        features = { "rustc-dep-of-std" = [ "core" "compiler_builtins" ]; };
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.19";
        edition = "2015";
        sha256 = "0wyfl6c00vhfl562spnfcna3zkw8jqvcp652m9iskhl8j26dc2k7";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = { target, features }: target."windows";
            features = [ "std" "minwinbase" "minwindef" "timezoneapi" ];
          }
        ];
        features = {
          "clock" = [ "libc" "std" "winapi" ];
          "default" = [ "clock" "std" "oldtime" ];
          "oldtime" = [ "time" ];
          "unstable-locales" = [ "pure-rust-locales" "alloc" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures =
          [ "clock" "default" "libc" "oldtime" "std" "time" "winapi" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.6.1";
        edition = "2015";
        sha256 = "0mwl9vngqf5jvrhmhn9x60kr5hivxyjxbmby2pybncxfqhf4z3g7";
        authors = [ "bluss" ];
        features = { "default" = [ "use_std" ]; };
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.12";
        edition = "2018";
        sha256 = "0ihq3a3yc6ial3sw536q75hrhixq22xk6wn5qzpnxazgqxz1plzj";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        dependencies = [{
          name = "futures-core";
          packageId = "futures-core";
          usesDefaultFeatures = false;
        }];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "cfg-target-has-atomic" = [ "futures-core/cfg-target-has-atomic" ];
          "default" = [ "std" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
          "unstable" = [ "futures-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.12";
        edition = "2018";
        sha256 = "0r8ag0mkxx9cd74yrccjk31lph4gr6lhgb9di6rx39wdvrfi9rbr";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.12";
        edition = "2018";
        sha256 = "1ffr1zclhz60ql49n2pj44jhhk22yah41xwlpyb30jws03f9zrg9";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.12";
        edition = "2018";
        sha256 = "1pgyb219ybh3fj3ig0h1c2b7k4cqldy95ifdpnd9yb9jvmdd51y2";
        procMacro = true;
        authors = [
          "Taylor Cramer <cramertj@google.com>"
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.12";
        edition = "2018";
        sha256 = "11ldlpl7mis5crys731dj7s7npgigdgrzdm7mi2y86m8ivmhgphk";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        dependencies = [{
          name = "once_cell";
          packageId = "once_cell";
          optional = true;
          usesDefaultFeatures = false;
          features = [ "std" ];
        }];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "once_cell" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "once_cell" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.12";
        edition = "2018";
        sha256 = "0jv25s07igmqavigdfzr02yw6j1q0vg8pw2p2vmgvcx4yb88qak3";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "proc-macro-hack";
            packageId = "proc-macro-hack";
            optional = true;
          }
          {
            name = "proc-macro-nested";
            packageId = "proc-macro-nested";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [
            "async-await"
            "futures-macro"
            "proc-macro-hack"
            "proc-macro-nested"
          ];
          "cfg-target-has-atomic" = [
            "futures-core/cfg-target-has-atomic"
            "futures-task/cfg-target-has-atomic"
          ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "read-initializer" =
            [ "io" "futures-io/read-initializer" "futures-io/unstable" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "async-await"
          "async-await-macro"
          "default"
          "futures-macro"
          "proc-macro-hack"
          "proc-macro-nested"
          "slab"
          "std"
        ];
      };
      "glib" = rec {
        crateName = "glib";
        version = "0.10.3";
        edition = "2015";
        sha256 = "1ifh56nhvhcrssxqkad876qqrlnl16q6b8ap3f7ncpjinw9m0s0c";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
          }
          {
            name = "futures-task";
            packageId = "futures-task";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "glib-macros";
            packageId = "glib-macros";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "dox" = [ "glib-sys/dox" "gobject-sys/dox" ];
          "v2_44" = [ "glib-sys/v2_44" "gobject-sys/v2_44" ];
          "v2_46" = [ "v2_44" "glib-sys/v2_46" "gobject-sys/v2_46" ];
          "v2_48" = [ "v2_46" "glib-sys/v2_48" ];
          "v2_50" = [ "v2_48" "glib-sys/v2_50" ];
          "v2_52" = [ "v2_50" "glib-sys/v2_52" ];
          "v2_54" = [ "v2_52" "glib-sys/v2_54" "gobject-sys/v2_54" ];
          "v2_56" = [ "v2_54" "glib-sys/v2_56" ];
          "v2_58" = [ "v2_56" "glib-sys/v2_58" "gobject-sys/v2_58" ];
          "v2_60" = [ "v2_58" "glib-sys/v2_60" ];
          "v2_62" = [ "v2_60" "glib-sys/v2_62" "gobject-sys/v2_62" ];
          "v2_64" = [ "v2_62" "glib-sys/v2_64" ];
        };
      };
      "glib-macros" = rec {
        crateName = "glib-macros";
        version = "0.10.1";
        edition = "2018";
        sha256 = "0fa00s6gnj3hgri9z926199jidczlmjr1db0n4r80sins4k6lj21";
        procMacro = true;
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "glib-sys" = rec {
        crateName = "glib-sys";
        version = "0.10.1";
        edition = "2015";
        sha256 = "1hfdwilf3dnrv3pnfbwmp3h2afgwvfsapcgjfg8276kflsbvksf7";
        libName = "glib_sys";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [{
          name = "libc";
          packageId = "libc";
        }];
        buildDependencies = [{
          name = "system-deps";
          packageId = "system-deps";
        }];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_48" = [ "v2_46" ];
          "v2_50" = [ "v2_48" ];
          "v2_52" = [ "v2_50" ];
          "v2_54" = [ "v2_52" ];
          "v2_56" = [ "v2_54" ];
          "v2_58" = [ "v2_56" ];
          "v2_60" = [ "v2_58" ];
          "v2_62" = [ "v2_60" ];
          "v2_64" = [ "v2_62" ];
        };
      };
      "gobject-sys" = rec {
        crateName = "gobject-sys";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1311d3zbdhl1g7ibj1iy1650513yrhxbjxgfhazn52ii1jv368cm";
        libName = "gobject_sys";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [{
          name = "system-deps";
          packageId = "system-deps";
        }];
        features = {
          "v2_46" = [ "v2_44" ];
          "v2_54" = [ "v2_46" ];
          "v2_58" = [ "v2_54" ];
          "v2_62" = [ "v2_58" ];
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1b56s2c1ymdd0qmy31bw0ndhm31hcdamnhg3npp7ssrmc1ag9jw7";
        authors = [ "Without Boats <woboats@gmail.com>" ];
        dependencies = [{
          name = "unicode-segmentation";
          packageId = "unicode-segmentation";
        }];

      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0jyml7ygr7kijkcjdl3fk5f34y5h5jsavclim7l13zjiavw1hkr8";
        authors = [ "bluss" ];
        dependencies = [{
          name = "either";
          packageId = "either";
          usesDefaultFeatures = false;
        }];
        features = { "default" = [ "use_std" ]; };
        resolvedDefaultFeatures = [ "default" "use_std" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.86";
        edition = "2015";
        sha256 = "074b38mq1rx3dgg7sf952d4ccywq450zymk7gzn5q9z39f92sa5p";
        authors = [ "The Rust Project Developers" ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.14";
        edition = "2015";
        sha256 = "04175hv0v62shd82qydq58a48k3bjijmk54v38zgqlbxqkkbpfai";
        authors = [ "The Rust Project Developers" ];
        dependencies = [{
          name = "cfg-if";
          packageId = "cfg-if 1.0.0";
        }];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "my_penrose_config" = rec {
        crateName = "my_penrose_config";
        version = "0.1.0";
        edition = "2018";
        crateBin = [{
          name = "penrose";
          path = "src/main.rs";
        }];
        src = (builtins.filterSource sourceFilter ./.);
        authors = [ "Adomas Jatužis <adomixaszvers@gmail.com>" ];
        dependencies = [
          {
            name = "penrose";
            packageId = "penrose";
          }
          {
            name = "simplelog";
            packageId = "simplelog";
          }
        ];

      };
      "nix" = rec {
        crateName = "nix";
        version = "0.17.0";
        edition = "2015";
        sha256 = "0qvk09kib3jpvpbaps0682nav20ibql61pf1s2h8jx9v5igpir2h";
        authors = [ "The nix-rust Project Developers" ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if 0.1.10";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "void";
            packageId = "void";
          }
        ];
        buildDependencies = [{
          name = "cc";
          packageId = "cc";
          target = { target, features }: (target."os" == "dragonfly");
        }];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.44";
        edition = "2015";
        sha256 = "1nq152y3304as1iai95hqz8prqnc94lks1s7q05sfjdmcf56kk6j";
        authors = [ "The Rust Project Developers" ];
        dependencies = [{
          name = "num-traits";
          packageId = "num-traits";
          usesDefaultFeatures = false;
        }];
        buildDependencies = [{
          name = "autocfg";
          packageId = "autocfg";
        }];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.14";
        edition = "2015";
        sha256 = "144j176s2p76azy2ngk2vkdzgwdc0bc8c93jhki8c9fsbknb2r4s";
        authors = [ "The Rust Project Developers" ];
        buildDependencies = [{
          name = "autocfg";
          packageId = "autocfg";
        }];
        features = { "default" = [ "std" ]; };
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.5.2";
        edition = "2018";
        sha256 = "183zs1dbmsv24mkafjypf9qwjrx46an58vb004a162l113sl3g8k";
        authors = [ "Aleksey Kladov <aleksey.kladov@gmail.com>" ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pango" = rec {
        crateName = "pango";
        version = "0.9.1";
        edition = "2015";
        sha256 = "0f64hynd9vq6966wb66mrg5kq9q371bkhncp37nqrgdyh22hcdwr";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        features = {
          "dox" = [ "pango-sys/dox" "glib/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" ];
          "v1_38" = [ "pango-sys/v1_38" ];
          "v1_40" = [ "v1_38" ];
          "v1_42" = [ "v1_40" "pango-sys/v1_42" ];
          "v1_44" = [ "v1_42" "pango-sys/v1_44" ];
        };
      };
      "pango-sys" = rec {
        crateName = "pango-sys";
        version = "0.10.0";
        edition = "2015";
        sha256 = "1468xzyk2wanxb2b32fsmwk6bnafdaicxl5b4301dlb2ic66bli4";
        libName = "pango_sys";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [{
          name = "system-deps";
          packageId = "system-deps";
        }];
        features = {
          "v1_38" = [ "v1_36_7" ];
          "v1_42" = [ "v1_38" ];
          "v1_44" = [ "v1_42" ];
        };
      };
      "pangocairo" = rec {
        crateName = "pangocairo";
        version = "0.10.0";
        edition = "2015";
        sha256 = "10z8hlc82984nwvy5pnyh95ls9s5r1qrlkpn14zh4pjsl1ksxx80";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "glib";
            packageId = "glib";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "gobject-sys";
            packageId = "gobject-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango";
            packageId = "pango";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
          {
            name = "pangocairo-sys";
            packageId = "pangocairo-sys";
          }
        ];
        features = {
          "dox" = [ "glib/dox" "pango/dox" "cairo-rs/dox" ];
          "embed-lgpl-docs" = [ "gtk-rs-lgpl-docs" "cairo-rs/embed-lgpl-docs" ];
          "purge-lgpl-docs" = [ "gtk-rs-lgpl-docs" "cairo-rs/purge-lgpl-docs" ];
        };
      };
      "pangocairo-sys" = rec {
        crateName = "pangocairo-sys";
        version = "0.11.0";
        edition = "2015";
        sha256 = "167b1z6ns3lw1dqfq3mnhmknf7isi5vacp2fp0rh4bwcd5zwkk4l";
        libName = "pango_cairo_sys";
        authors = [ "The Gtk-rs Project Developers" ];
        dependencies = [
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
          }
          {
            name = "glib-sys";
            packageId = "glib-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pango-sys";
            packageId = "pango-sys";
          }
        ];
        buildDependencies = [{
          name = "system-deps";
          packageId = "system-deps";
        }];
        features = { };
      };
      "penrose" = rec {
        crateName = "penrose";
        version = "0.2.0";
        edition = "2018";
        sha256 = "095wr4md52zp1cwhgj6mia2g0vlrvyz8m3q1vv9iq95mqd1b68dz";
        authors = [ "sminez <innes.andersonmorrison@gmail.com>" ];
        dependencies = [
          {
            name = "cairo-rs";
            packageId = "cairo-rs";
            optional = true;
            features = [ "xcb" ];
          }
          {
            name = "cairo-sys-rs";
            packageId = "cairo-sys-rs";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix";
          }
          {
            name = "pango";
            packageId = "pango";
            optional = true;
          }
          {
            name = "pangocairo";
            packageId = "pangocairo";
            optional = true;
          }
          {
            name = "strum";
            packageId = "strum 0.19.5";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.19.4";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "xcb";
            packageId = "xcb";
            optional = true;
            features = [ "randr" ];
          }
        ];
        features = {
          "default" = [ "xcb" "xcb_draw" ];
          "xcb_draw" = [ "cairo-rs" "cairo-sys-rs" "pango" "pangocairo" ];
        };
        resolvedDefaultFeatures = [
          "cairo-rs"
          "cairo-sys-rs"
          "default"
          "pango"
          "pangocairo"
          "xcb"
          "xcb_draw"
        ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.4";
        edition = "2018";
        sha256 = "09x8chns8apal89pndqdrr0c2nv8jw6nmi8hl38acjbc6sprg5j3";
        authors = [ "Taiki Endo <te316e89@gmail.com>" ];

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        authors = [ "Josef Brandl <mail@josefbrandl.de>" ];

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.19";
        edition = "2015";
        sha256 = "0k4860955riciibxr8bhnklp79jydp4xfylwdn5v9kj96hxlac9q";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];

      };
      "proc-macro-crate" = rec {
        crateName = "proc-macro-crate";
        version = "0.1.5";
        edition = "2018";
        sha256 = "11cpihdk9ba68hzw95aa8zxn0i5g6kdrfd4l2cy3d5jvb72a6vhx";
        authors = [ "Bastian Köcher <git@kchr.de>" ];
        dependencies = [{
          name = "toml";
          packageId = "toml";
        }];

      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [ "CreepySkeleton <creepy-skeleton@yandex.ru>" ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [{
          name = "version_check";
          packageId = "version_check";
        }];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [ "CreepySkeleton <creepy-skeleton@yandex.ru>" ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [{
          name = "version_check";
          packageId = "version_check";
        }];

      };
      "proc-macro-hack" = rec {
        crateName = "proc-macro-hack";
        version = "0.5.19";
        edition = "2018";
        sha256 = "1rg0kzsj7lj00qj602d3h77spwfz48vixn1wbjp7a4yrq65w9w6v";
        procMacro = true;
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];

      };
      "proc-macro-nested" = rec {
        crateName = "proc-macro-nested";
        version = "0.1.7";
        edition = "2015";
        sha256 = "11hh1jynh62f3m1ii0f9gf1l3y0fhkwpmr40lz3704v848n1p25w";
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.24";
        edition = "2018";
        sha256 = "0wcabxzrddcjmryndw8fpyxcq6rw63m701vx86xxf03y3bp081qy";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [{
          name = "unicode-xid";
          packageId = "unicode-xid";
        }];
        features = { "default" = [ "proc-macro" ]; };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.9";
        edition = "2018";
        sha256 = "19rjmfqzk26rxbgxy5j2ckqc2v12sw2xw8l4gi8bzpn2bmsbkl63";
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];
        dependencies = [{
          name = "proc-macro2";
          packageId = "proc-macro2";
          usesDefaultFeatures = false;
        }];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.123";
        edition = "2015";
        sha256 = "1bk9733mgiv5sg8yb19y8mc85fb2aaqp1k02v10alavj688idmcj";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "simplelog" = rec {
        crateName = "simplelog";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0g6dqa9pknk9viddf696wwrbhl0898ziv5jri128lac7h3skc9rb";
        authors = [ "Drakulix <github@drakulix.de>" ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = { "default" = [ "termcolor" ]; };
        resolvedDefaultFeatures = [ "default" "termcolor" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.2";
        edition = "2015";
        sha256 = "1y59xsa27jk84sxzswjk60xcjf8b4fm5960jwpznrrcmasyva4f1";
        authors = [ "Carl Lerche <me@carllerche.com>" ];

      };
      "strum 0.18.0" = rec {
        crateName = "strum";
        version = "0.18.0";
        edition = "2015";
        sha256 = "0asjskn1qhqqfiq673np0gvmnd1rsp506m38vk53gi7l93mq3gap";
        authors = [ "Peter Glotfelty <peter.glotfelty@microsoft.com>" ];
        features = { "derive" = [ "strum_macros" ]; };
      };
      "strum 0.19.5" = rec {
        crateName = "strum";
        version = "0.19.5";
        edition = "2018";
        sha256 = "1d8i5xwkc2z7z02ibln80z1bmpjhpi9k5ckpljwj0mrvgrm2i6mq";
        authors = [ "Peter Glotfelty <peter.glotfelty@microsoft.com>" ];
        dependencies = [{
          name = "strum_macros";
          packageId = "strum_macros 0.19.4";
          optional = true;
        }];
        devDependencies = [{
          name = "strum_macros";
          packageId = "strum_macros 0.19.4";
        }];
        features = { "derive" = [ "strum_macros" ]; };
        resolvedDefaultFeatures = [ "derive" "strum_macros" ];
      };
      "strum_macros 0.18.0" = rec {
        crateName = "strum_macros";
        version = "0.18.0";
        edition = "2015";
        sha256 = "0k3pwbv0c8q00jnsjshzfc2d5r3y6ppgf9fz7pyknrgaz2immj47";
        procMacro = true;
        authors = [ "Peter Glotfelty <peter.glotfelty@microsoft.com>" ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "parsing" "extra-traits" ];
          }
        ];
        features = { };
      };
      "strum_macros 0.19.4" = rec {
        crateName = "strum_macros";
        version = "0.19.4";
        edition = "2018";
        sha256 = "1mgqs5x3g0d3bmr8dhalgqrzh29dwc90a06fpy0cnich52zb06z6";
        procMacro = true;
        authors = [ "Peter Glotfelty <peter.glotfelty@microsoft.com>" ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "parsing" "extra-traits" ];
          }
        ];
        features = { };
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.60";
        edition = "2018";
        sha256 = "1080gw6mlja7yl26crya3k403wjdp7v3wx9mxcmpcnlar9z5j067";
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" =
            [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "quote"
        ];
      };
      "system-deps" = rec {
        crateName = "system-deps";
        version = "1.3.2";
        edition = "2018";
        sha256 = "16v4ljmj8sj030mdcc1yk615vciqlyxi7csq6lxka6cs4qbwqghg";
        authors = [
          "Guillaume Desmottes <guillaume.desmottes@collabora.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "strum";
            packageId = "strum 0.18.0";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros 0.18.0";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml";
            usesDefaultFeatures = false;
          }
          {
            name = "version-compare";
            packageId = "version-compare";
          }
        ];

      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1x65i1ny4m6z1by62ra6wdcrd557p2ysm866x0pg60zby2cxizid";
        authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
        dependencies = [{
          name = "winapi-util";
          packageId = "winapi-util";
          target = { target, features }: target."windows";
        }];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.24";
        edition = "2018";
        sha256 = "13m99wjikivkkwd209fgxhdprjxj17s39ldfvn1l8k89jxasdx70";
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];
        dependencies = [{
          name = "thiserror-impl";
          packageId = "thiserror-impl";
        }];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.24";
        edition = "2018";
        sha256 = "1h7kh6rr4vsm79dmv8qk8drhh2if3zyxc1lqa921l96q22b1hrbp";
        procMacro = true;
        authors = [ "David Tolnay <dtolnay@gmail.com>" ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.1.44";
        edition = "2015";
        sha256 = "0m9jwy2pcmk232r3b9r80fs12mkckfjffjha4qfaxcdq9a8ydfbd";
        authors = [ "The Rust Project Developers" ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "wasi";
            packageId = "wasi";
            target = { target, features }: (target."os" == "wasi");
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: target."windows";
            features = [
              "std"
              "minwinbase"
              "minwindef"
              "ntdef"
              "profileapi"
              "sysinfoapi"
              "timezoneapi"
            ];
          }
        ];
        devDependencies = [{
          name = "winapi";
          packageId = "winapi";
          features = [ "std" "processthreadsapi" "winbase" ];
        }];

      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.8";
        edition = "2018";
        sha256 = "1apcmjrrjw429pjw7mqlmdwwd67g8305vwqy4kw3swr612bl44d3";
        authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
        dependencies = [{
          name = "serde";
          packageId = "serde";
        }];
        features = { "preserve_order" = [ "indexmap" ]; };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.7.1";
        edition = "2015";
        sha256 = "15n736z0pbj30pj44jb9s9rjavzrmx8v8pzdgsl5yfmfwrxjw3dv";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = { };
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0r6mknipyy9vpz8mwmxvkx65ff2ha1n2pxqjj6f46lcn8yrhpzpp";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version-compare" = rec {
        crateName = "version-compare";
        version = "0.0.10";
        edition = "2018";
        sha256 = "18ack6rx18rp700h1dncljmpzchs3p2dfh76a8ds6vmfbfi5cdfn";
        authors = [ "timvisee <timvisee@gmail.com>" ];
        features = { };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.2";
        edition = "2015";
        sha256 = "1vbaqdf802qinsq8q20w8w0qn2pv0rkq5p73ijcblrwxcvjp5adm";
        authors = [ "Sergio Benitez <sb@sergio.bz>" ];

      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
        features = { "default" = [ "std" ]; };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.10.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "07y3l8mzfzzz4cj09c8y90yak4hpsi9g7pllyzpr6xvwrabka50s";
        authors = [ "The Cranelift Project Developers" ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" =
            [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [ "Peter Atashian <retep998@gmail.com>" ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }:
              (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }:
              (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = { "debug" = [ "impl-debug" ]; };
        resolvedDefaultFeatures = [
          "consoleapi"
          "errhandlingapi"
          "fileapi"
          "minwinbase"
          "minwindef"
          "ntdef"
          "processenv"
          "profileapi"
          "std"
          "sysinfoapi"
          "timezoneapi"
          "winbase"
          "wincon"
          "winerror"
          "winnt"
        ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [ "Peter Atashian <retep998@gmail.com>" ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0y71bp7f6d536czj40dhqk0d55wfbbwqfp2ymqf1an5ibgl6rv3h";
        authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
        dependencies = [{
          name = "winapi";
          packageId = "winapi";
          target = { target, features }: target."windows";
          features = [
            "std"
            "consoleapi"
            "errhandlingapi"
            "fileapi"
            "minwindef"
            "processenv"
            "winbase"
            "wincon"
            "winerror"
            "winnt"
          ];
        }];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [ "Peter Atashian <retep998@gmail.com>" ];

      };
      "xcb" = rec {
        crateName = "xcb";
        version = "0.9.0";
        edition = "2015";
        sha256 = "19i2pm8alpn2f0m4jg8bsw6ckw8irj1wjh55h9pi2fcb2diny1b2";
        authors = [ "Remi Thebault <remi.thebault@gmail.com>" ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
        ];
        buildDependencies = [{
          name = "libc";
          packageId = "libc";
        }];
        features = {
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "debug_all" = [
            "thread"
            "composite"
            "damage"
            "dpms"
            "dri2"
            "dri3"
            "glx"
            "randr"
            "record"
            "render"
            "res"
            "screensaver"
            "shape"
            "shm"
            "xevie"
            "xf86dri"
            "xfixes"
            "xinerama"
            "xkb"
            "xprint"
            "xselinux"
            "xtest"
            "xvmc"
            "xv"
            "xlib_xcb"
          ];
          "present" = [ "render" "xfixes" "sync" ];
          "randr" = [ "render" ];
          "xfixes" = [ "render" "shape" ];
          "xinput" = [ "xfixes" ];
          "xlib_xcb" = [ "x11/xlib" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [ "randr" "render" ];
      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /* Target (platform) data for conditional dependencies.
       This corresponds roughly to what buildRustCrate is setting.
    */
    defaultTarget = {
      unix = true;
      windows = false;
      fuchsia = true;
      test = false;

      # This doesn't appear to be officially documented anywhere yet.
      # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
      os = if stdenv.hostPlatform.isDarwin then
        "macos"
      else
        stdenv.hostPlatform.parsed.kernel.name;
      arch = stdenv.hostPlatform.parsed.cpu.name;
      family = "unix";
      env = "gnu";
      endian = if stdenv.hostPlatform.parsed.cpu.significantByte.name
      == "littleEndian" then
        "little"
      else
        "big";
      pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
      vendor = stdenv.hostPlatform.parsed.vendor.name;
      debug_assertions = false;
    };

    # Filters common temp files and build files.
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter = name: type:
      let baseName = builtins.baseNameOf (builtins.toString name);
      in !(
        # Filter out git
        baseName == ".gitignore" || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (type == "directory" && (baseName == "target" || baseName == "_site"
          || baseName == ".sass-cache" || baseName == ".jekyll-metadata"
          || baseName == "build-artifacts"))

        # Filter out nix-build result symlinks        
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory"
          && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName || builtins.match "^\\.sw[a-z]$$" baseName
        != null || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix");

    /* Returns a crate which depends on successful test execution
       of crate given as the second argument.

       testCrateFlags: list of flags to pass to the test exectuable
       testInputs: list of packages that should be available during test execution
    */
    crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test = let drv = testCrate.override (_: { buildTests = true; });
        in pkgs.runCommand "run-tests-${testCrate.name}" {
          inherit testCrateFlags;
          buildInputs = testInputs;
        } ''
          set -ex
          cd ${crate.src}
          for file in ${drv}/tests/*; do
            $file $testCrateFlags 2>&1 | tee -a $out
          done
        '';
      in crate.overrideAttrs (old: {
        checkPhase = ''
          test -e ${test}
        '';
        passthru = (old.passthru or { }) // { inherit test; };
      });

    # A restricted overridable version of builtRustCratesWithFeatures.
    buildRustCrateWithFeatures = { packageId, features ? rootFeatures
      , crateOverrides ? defaultCrateOverrides, buildRustCrateFunc ?
        (if crateOverrides == pkgs.defaultCrateOverrides then
          buildRustCrate
        else
          buildRustCrate.override { defaultCrateOverrides = crateOverrides; })
      , runTests ? false, testCrateFlags ? [ ], testInputs ? [ ] }:
      lib.makeOverridable
      ({ features, crateOverrides, runTests, testCrateFlags, testInputs }:
        let
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features buildRustCrateFunc;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features buildRustCrateFunc;
            runTests = true;
          };
          drv = builtRustCrates.${packageId};
          testDrv = builtTestRustCrates.${packageId};
        in if runTests then
          crateWithTest {
            crate = drv;
            testCrate = testDrv;
            inherit testCrateFlags testInputs;
          }
        else
          drv) {
            inherit features crateOverrides runTests testCrateFlags testInputs;
          };

    /* Returns an attr set with packageId mapped to the result of buildRustCrateFunc
       for the corresponding crate.
    */
    builtRustCratesWithFeatures = { packageId, features, crateConfigs ? crates
      , buildRustCrateFunc, runTests, target ? defaultTarget }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (args // {
          inherit rootPackageId;
          target = target // { test = runTests; };
        });

        buildByPackageId = packageId: buildByPackageIdImpl packageId;

        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageId =
          lib.mapAttrs (packageId: value: buildByPackageId packageId)
          crateConfigs;

        buildByPackageIdImpl = packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            devDependencies =
              lib.optionals (runTests && packageId == rootPackageId)
              (crateConfig'.devDependencies or [ ]);
            dependencies = dependencyDerivations {
              inherit builtByPackageId features target;
              dependencies = (crateConfig.dependencies or [ ])
                ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit builtByPackageId features target;
              dependencies = crateConfig.buildDependencies or [ ];
            };

            filterEnabledDependenciesForThis = dependencies:
              filterEnabledDependencies {
                inherit dependencies features target;
              };

            dependenciesWithRenames = lib.filter (d: d ? "rename")
              (filterEnabledDependenciesForThis
                ((crateConfig.buildDependencies or [ ])
                  ++ (crateConfig.dependencies or [ ]) ++ devDependencies));

            crateRenames = builtins.listToAttrs (map (d: {
              name = d.name;
              value = d.rename;
            }) dependenciesWithRenames);
          in buildRustCrateFunc (crateConfig // {
            src = crateConfig.src or (pkgs.fetchurl {
              name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
              url =
                "https://crates.io/api/v1/crates/${crateConfig.crateName}/${crateConfig.version}/download";
              sha256 = crateConfig.sha256;
            });
            inherit features dependencies buildDependencies crateRenames
              release;
          });
      in builtByPackageId;

    # Returns the actual derivations for the given dependencies.
    dependencyDerivations =
      { builtByPackageId, features, dependencies, target }:
      assert (builtins.isAttrs builtByPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies =
          filterEnabledDependencies { inherit dependencies features target; };
        depDerivation = dependency: builtByPackageId.${dependency.packageId};
      in map depDerivation enabledDependencies;

    /* Returns a sanitized version of val with all values substituted that cannot
       be serialized as JSON.
    */
    sanitizeForJson = val:
      if builtins.isAttrs val then
        lib.mapAttrs (n: v: sanitizeForJson v) val
      else if builtins.isList val then
        builtins.map sanitizeForJson val
      else if builtins.isFunction val then
        "function"
      else
        val;

    # Returns various tools to debug a crate.
    debugCrate = { packageId, target ? defaultTarget }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateFunc = lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateFunc = crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures =
            diffDefaultPackageFeatures { inherit packageId target; };
        };
      in { internal = debug; };

    /* Returns differences between cargo default features and crate2nix default
       features.

       This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures = { crateConfigs ? crates, packageId, target }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo = builtins.attrNames
          (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo"))
            combined);
        onlyInCrate2Nix = builtins.attrNames
          (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo"))
            combined);
        differentFeatures = lib.filterAttrs (n: v:
          (v ? "crate2nix") && (v ? "cargo") && (v.crate2nix.features or [ ])
          != (v."cargo".resolved_default_features or [ ])) combined;
      in builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

    /* Returns an attrset mapping packageId to the list of enabled features.

       If multiple paths to a dependency enable different features, the
       corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures = { crateConfigs ? crates, packageId
      , rootPackageId ? packageId, features ? rootFeatures
      , dependencyPath ? [ crates.${packageId}.crateName ]
      , featuresByPackageId ? { }, target
      # Adds devDependencies to the crate with rootPackageId.
      , runTests ? false, ... }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw
          "Package not found: ${packageId}");
        expandedFeatures =
          expandFeatures (crateConfig.features or { }) features;

        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in { inherit packageId features; };

        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies =
              map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in foldOverCache (cache:
            { packageId, features }:
            let
              cacheFeatures = cache.${packageId} or [ ];
              combinedFeatures = sortedUnique (cacheFeatures ++ features);
            in if cache ? ${packageId} && cache.${packageId}
            == combinedFeatures then
              cache
            else
              mergePackageFeatures {
                features = combinedFeatures;
                featuresByPackageId = cache;
                inherit crateConfigs packageId target runTests rootPackageId;
              });

        cacheWithSelf = let
          cacheFeatures = featuresByPackageId.${packageId} or [ ];
          combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
        in featuresByPackageId // { "${packageId}" = combinedFeatures; };

        cacheWithDependencies = resolveDependencies cacheWithSelf "dep"
          (crateConfig.dependencies or [ ]
            ++ lib.optionals (runTests && packageId == rootPackageId)
            (crateConfig.devDependencies or [ ]));

        cacheWithAll = resolveDependencies cacheWithDependencies "build"
          (crateConfig.buildDependencies or [ ]);
      in cacheWithAll;

    # Returns the enabled dependencies given the enabled features.
    filterEnabledDependencies = { dependencies, features, target }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter (dep:
        let targetFunc = dep.target or (features: true);
        in targetFunc { inherit features target; } && (!(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features))
      dependencies;

    # Returns whether the given feature should enable the given dependency.
    doesFeatureEnableDependency = { name, rename ? null, ... }:
      feature:
      let
        prefix = "${name}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
      in (rename == null && feature == name)
      || (rename != null && rename == feature) || startsWithPrefix;

    /* Returns the expanded features for the given inputFeatures by applying the
       rules in featureMap.

       featureMap is an attribute set which maps feature names to lists of further
       feature names to enable in case this feature is selected.
    */
    expandFeatures = featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeature = feature:
          assert (builtins.isString feature);
          [ feature ]
          ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
        outFeatures = builtins.concatMap expandFeature inputFeatures;
      in sortedUnique outFeatures;

    /* Returns the actual features for the given dependency.

       features: The features of the crate that refers this dependency.
    */
    dependencyFeatures = features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil =
          if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures = let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
      in defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    # Sorts and removes duplicates from a list of strings.
    sortedUnique = features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet =
          lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning = message: value:
      if strictDeprecation then
        builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else
        builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #

  };
}
